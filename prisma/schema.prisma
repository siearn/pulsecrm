// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String?   @unique
  name          String?
  email         String    @unique
  image         String?
  role          String    @default("USER") // USER, MANAGER, ADMIN, SUPER_ADMIN
  companyId     String?
  invitedBy     String?   // ID of the user who sent the invitation
  inviteToken   String?   @unique // For invitation links
  inviteExpires DateTime? // Expiration date for invitations
  lastActive    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company       Company?  @relation(fields: [companyId], references: [id])
  assignedLeads Lead[]
  assignedTasks Task[]
}

model Company {
  id                  String    @id @default(cuid())
  name                String
  website             String?
  address             String?
  industry            String?
  size                String?
  stripeCustomerId    String?
  stripeSubscriptionId String?
  planType            String    @default("FREE_TRIAL") // FREE_TRIAL, STARTER, PRO, ENTERPRISE
  maxSeats            Int       @default(5)
  usedSeats           Int       @default(1) // Track how many seats are currently used
  trialEndsAt         DateTime?
  billingEmail        String?
  billingName         String?
  billingAddress      String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  users     User[]
  leads     Lead[]
  customers Customer[]
  tasks     Task[]
  files     File[]
  invites   Invite[]
}

model Invite {
  id          String   @id @default(cuid())
  email       String
  name        String?
  role        String   @default("USER")
  token       String   @unique
  expires     DateTime
  companyId   String
  invitedById String
  createdAt   DateTime @default(now())
  
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Lead {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  status      String   @default("NEW") // NEW, CONTACTED, QUALIFIED, PROPOSAL, NEGOTIATION, WON, LOST
  value       Float?
  source      String?
  notes       String?
  companyId   String
  assignedToId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyRef  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedTo  User?    @relation(fields: [assignedToId], references: [id])
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  company     String?
  address     String?
  notes       String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyRef  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  type        String   @default("FOLLOW_UP") // CALL, EMAIL, MEETING, FOLLOW_UP
  dueDate     DateTime?
  companyId   String
  assignedToId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyRef  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedTo  User?    @relation(fields: [assignedToId], references: [id])
}

model File {
  id          String   @id @default(cuid())
  name        String
  path        String
  size        Int
  type        String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyRef  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

